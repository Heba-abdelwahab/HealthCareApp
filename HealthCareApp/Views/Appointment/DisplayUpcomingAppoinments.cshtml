@model IEnumerable<HealthCareApp.ViewModel.Appointment.UpcomingAppointmentsVM>

@{
    ViewData["Title"] = "Upcoming Appointments";
    var currentDate = DateTime.Now;
    string activeTab = Context.Request.Query["tab"].FirstOrDefault()?.ToLower() ?? "all";
    // var filteredAppoinments = activeTab == "all"
        // ? Model
        // : Model.Where(item =>
        //     activeTab == "virtual"
        //         ? item.Mode.ToString().Equals("Online", StringComparison.OrdinalIgnoreCase)
        //         : item.Mode.ToString().Equals("Offline", StringComparison.OrdinalIgnoreCase)
        //   ).ToList();
}

<style>
    :root {
        --doctor-gradient: linear-gradient(135deg, #C5D3E8, #223249);
        --white: #ffffff;
        --light-gray: #f5f5f5;
        --dark-blue: #223249;
        --highlight-blue: #26364d;
        --virtual-blue: #4e7dc5;
        --danger-red: #dc3545;
        --success-green: #28a745;
        --bg-color-2: #f0f8ff;
    }

    .bg-healthcare-dark-blue
    {
        background: #223249;
    }
    .healthcare-container {
        min-height: 100vh;
        background: linear-gradient(to bottom, var(--light-gray), var(--bg-color-2));
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .healthcare-header {
        background: var(--white);
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        padding: 24px;
        margin-bottom: 24px;
        background: var(--doctor-gradient);
    }

    .healthcare-card {
        background: var(--white);
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        border: 1px solid rgba(197, 211, 232, 0.3);
    }

        .healthcare-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.1);
        }

    .type-indicator {
        height: 8px;
        background: var(--dark-blue);
    }

        .type-indicator.virtual {
            background: var(--virtual-blue);
        }

    .healthcare-badge {
        display: inline-flex;
        align-items: center;
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
    }

    .filter-tabs {
        width:400px;
        height:48px;
        display: flex;
        gap: 8px;
        background: #f0f8ff;
        border-radius: 8px;
        padding: 4px;
        max-width: 400px;
        margin-bottom: 24px;
    }

    .filter-tab {
        flex: 1;
        padding: 8px 16px;
        border-radius: 6px;
        border: none;
        background: transparent;
        color: var(--dark-blue);
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        text-align: center;
    }

        .filter-tab.active {
            background: var(--dark-blue);
            color: var(--white);
        }

    .action-button {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: 6px 12px;
        border-radius: 4px;
        font-size: 0.85rem;
        font-weight: 500;
        transition: all 0.2s ease;
        border: 1px solid #f0f8ff;
        background: var(--white);
        color: var(--dark-blue);
        text-decoration: none;
    }

        .action-button:hover {
            background: #f0f8ff;
        }

    .status-badge {
        padding: 4px 10px;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 500;
    }

    .real-time-clock {
        background: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(5px);
        border-radius: 8px;
        padding: 8px 16px;
    }

    .availability-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
        justify-content: center;
        gap: 20px;
        padding: 2rem;
    
    }
</style>

<div class="healthcare-container">
    <div class="container mx-auto py-8 px-4 md:px-8 max-w-7xl">
        <!-- Header Section -->
        <header class="healthcare-header mt-4">
            <div class="flex flex-col md:flex-row justify-between items-start md:items-center text-white">
                <div>
                    <div class="d-flex justify-content-between">
                    <h1 class="text-3xl font-bold tracking-tight" ">Upcoming Appointments</h1>

						<div class="real-time-clock" style="font-size:25px;">
                            <span id="currentTime" class="d-flex align-items-center">@currentDate.ToString("hh:mm tt")</span>
                        </div>
                    </div>
                    <div class="mt-2 flex items-center space-x-4">
                        <p class="text-blue-100/80" id="currentDate">@currentDate.ToString("dddd, MMMM dd, yyyy")</p>
                    </div>
                </div>
            </div>
        </header>


        <div class="card shadow rounded-4 border-0 mt-4" style="background-color: #96a5ba;">
            <div class="card-body">
                <div class="text-white p-3">
                    <h5 class="card-title text-start">Your Schedule</h5>
                    <h6 class="card-subtitle mb-2 text-muted text-start">Managing your appointments with ease</h6>
                    <hr />

                </div>
                <!-- Filter Tabs -->
                <div class="d-flex justify-content-between mt-2 mb-3 p-3">
                    <div>
                        <h3 class="text-2xl font-bold healthcare-dark-blue mb-1">
                            Upcoming Appointments
                            <span class="ml-2 bg-healthcare-dark-blue rounded-circle px-2 py-1 rounded-full text-white ">
                                @Model.Count()
                            </span>
                        </h3>
                        <p class="text-gray-500 text-sm">Displaying <span id="filterCount">@Model.Count()</span> of @Model.Count() appointments</p>
                    </div>
                   
                    <div class="filter-tabs">
                        
                      <a onclick="filterAppointments('all')"  href="?tab=all" class="filter-tab text-decoration-none @(activeTab == "all" ? "active" : "")">All</a>
                        <a onclick="filterAppointments('offline')" href="?tab=in-person" class="filter-tab text-decoration-none @(activeTab == "in-person" ? "active" : "")">In-Person</a>
                        <a onclick="filterAppointments('online')" href="?tab=virtual" class="filter-tab text-decoration-none @(activeTab == "virtual" ? "active" : "")">Virtual</a>

                      
     
                    </div>
                </div>

                <!-- Appointments Grid -->
                <div class=".availability-grid">
                    @foreach (var item in Model.OrderBy(app => app.Date).ThenBy(app => app.Time))
                    {
                        <div class="healthcare-card" data-mode="@item.Mode.ToString().ToLower()">
                            <div class="type-indicator @(item.Mode.ToString() == "Virtual" ? "virtual" : "")"></div>

                            <div class="p-6">
                                <!-- Patient Info -->
                                <div class="flex justify-between items-start mb-4">
                                    <div>
                                        <h3 class="text-lg font-bold text-[#223249]">@item.PatientName</h3>
                                        <p class="text-sm text-[#26364d]/70">@item.PatientPhone</p>
                                    </div>
                                    <span class="healthcare-badge @(item.Mode.ToString() == "Virtual" ? "bg-blue-100 text-blue-800" : "bg-green-100 text-green-800")">
                                        @item.Mode
                                    </span>
                                </div>

                                <!-- Date/Time Cards -->
                                <div class="grid grid-cols-2 gap-4 mb-4">
                                    <div class="bg-[#f0f8ff] p-3 rounded-lg">
                                        <p class="text-sm text-[#26364d]/70">Date</p>
                                        <p class="font-medium">@item.Date.ToString("MMM dd, yyyy")</p>
                                        <span class="text-xs text-[#26364d]/70">@GetFriendlyDay(item.Date)</span>
                                    </div>
                                    <div class="bg-[#f0f8ff] p-3 rounded-lg">
                                        <p class="text-sm text-[#26364d]/70">Time</p>
                                        <p class="font-medium">@item.Time</p>
                                    </div>
                                </div>

                                <!-- Status Badges -->
                                <div class="flex flex-wrap gap-2 mb-4">
                                    <span class="status-badge @GetStatusClasses(item.paymentStatus.ToString())">
                                        @item.paymentStatus
                                    </span>
                                    <span class="status-badge @GetMethodClasses(item.paymentMethod.ToString())">
                                        @item.paymentMethod
                                    </span>
                                </div>

                                <!-- Action Button -->
                                <div class="flex justify-end">
                                    <a href="@Url.Action("DisplayPatientInfoForDoctor", "Patient", new { patientId = item.PatientId })"
                                       class="action-button">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                        </svg>
                                        Patient Info
                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

        </div>

        <footer class="mt-12 text-center text-[#26364d]/70 text-sm pb-8">
            <p>© @DateTime.Now.Year Healthcare Appointment System</p>
        </footer>
    </div>
</div>


@functions {
    private string GetFriendlyDay(DateOnly date)
    {
        if (date == DateOnly.FromDateTime(DateTime.Now)) return "Today";
        if (date == DateOnly.FromDateTime(DateTime.Now).AddDays(1)) return "Tomorrow";
        return date.DayOfWeek.ToString();
    }

    private string GetStatusClasses(string status)
    {
        return status.ToLower() switch
        {
            "paid" => "bg-green-100 text-green-800",
            "pending" => "bg-yellow-100 text-yellow-800",
            "unpaid" => "bg-red-100 text-red-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    private string GetMethodClasses(string method)
    {
        return method.ToLower() switch
        {
            "credit card" => "bg-blue-100 text-blue-800",
            "cash" => "bg-gray-100 text-gray-800",
            "insurance" => "bg-purple-100 text-purple-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }
}

@section Scripts {
    <script>
        console.log("hi");
        // Real-time clock
        function updateClock() {
            const now = new Date();
            document.getElementById('currentTime').textContent =
                now.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });
            document.getElementById('currentDate').textContent =
                now.toLocaleDateString('en-US', { weekday: 'long', month: 'long', day: 'numeric', year: 'numeric' });
        }

        setInterval(updateClock, 1000);
        updateClock();

        // Filter Appointments
        function filterAppointments(mode) {
            const cards = document.querySelectorAll('.healthcare-card');
            document.querySelectorAll('.filter-tab').forEach(tab => {
                tab.classList.remove('active');
                if (tab.textContent.toLowerCase().replace('-', '') === mode.toLowerCase().replace('-', '')) {
                    tab.classList.add('active');
                }
            });

            cards.forEach(card => {
                const cardMode = card.dataset.mode.toLowerCase();
                if (mode === 'all' || cardMode === mode.toLowerCase()) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        }

        // Run the filter based on query string tab value
        window.addEventListener('DOMContentLoaded', () => {
            const urlParams = new URLSearchParams(window.location.search);
            const mode = urlParams.get('tab') || 'all';
            filterAppointments(mode);
        });
    </script>

}